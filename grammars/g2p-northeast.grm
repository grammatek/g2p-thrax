import 'common.grm' as common;
import 'g2p.grm' as g2p;
import 'g2p-north' as north;

######## G2P-rules for clear Icelandic pronunciation with the North-Eastern variant ####################################
#
# * input string is one token
# * input should be normalized (no digits, punctuation or other symbols, etc. are handled in this grammar)
# * compounds might not be entirely correctly transcribed, so decompounding is a good step to perform beforehand
# * exceptional cases are not handled, these should be listed in a manually edited pronunciation dictionary
#
# FSTs written as upper case are steps listed in the final export statement.
#
# This grammar was developed and tested using Version 1.3.3 of Thrax (http://www.openfst.org/twiki/bin/view/GRM/Thrax)
# and OpenFst 1.7.7 (http://www.openfst.org/twiki/bin/view/FST/WebHome)
#
# To compile and test this grammar from the command line:
#
# $thraxmakedep g2p.grm
# $make
# $thraxrewrite-tester --far=g2p-northeast.far --rules=G2P --input_mode=utf8 --output_mode=utf8
#
#############################################################################################################

# all possible input and output symbols
sigma_star = common.whole_alphabet*;

#####################################
#
#  NG-NK
#
#####################################
# in standard pronunciation a, e, i, o, u and รถ become 'au' 'ei' 'i' 'ou' 'u' and '9i' before ng and nk
# keep 'ei' as input as well to deal with words like 'einkunn'

diphthongize = ("+a".utf8 : " au".utf8) | ("+e".utf8 : " ei".utf8) 
  | ("+ei".utf8 : " ei".utf8) | ("+i".utf8 : " i".utf8) | ("+y".utf8 : " i".utf8)
  | ("+o".utf8 : " ou".utf8) | ("+u".utf8 : " u".utf8) | ("+รถ".utf8 : " 9i".utf8);
ng_nk_rule = CDRewrite[diphthongize, "", "+n+g" | "+n+k", sigma_star];
ng_nk_fst = Optimize[ng_nk_rule];

# in North-Eastern pronunciation 'ng' becomes 'Jc' and 'nk' becomes 'Jc_h' in a front-vowel environment
nasal_clusters_front = ("+n+g".utf8: " J c".utf8) | ("+n+k".utf8 : " J c_h");
nasal_clusters_front_rule = CDRewrite[nasal_clusters_front, "", common.plus common.front_vowel, sigma_star];
nasals_fronting = Optimize[nasal_clusters_front_rule];

# in North-Eastern pronunciation 'ng' becomes 'Nk' and 'nk' becomes 'Nk_h' in a back-vowel environment
nasal_clusters_back = ("+n+g".utf8 : " N k".utf8) | ("+n+k".utf8 : " N k_h".utf8);
nasal_clusters_back_rule = CDRewrite[nasal_clusters_back, "", common.plus_or_space* (common.back_vowel | common.liquid | "[EOS]"), sigma_star];
nasals_back = Optimize[nasal_clusters_back_rule];

export NG_NK = Optimize[ng_nk_fst @ nasals_fronting @ nasals_back];

########################################
#
#  Northeast voiced pronunciation in clusters
#
########################################

northeast_clusters = ("+รฐ+k".utf8 : " D k_h".utf8) | ("+f+l+t".utf8 : " l_0 t".utf8) | ("+f+n+t".utf8 : " m t_h".utf8)
  | ("+l+k".utf8 : " l k_h".utf8) | ("+l c".utf8 : " l c_h".utf8) | ("+l+p".utf8 : " l p_h".utf8) | ("+m+p".utf8 : " m p_h".utf8) 
  | ("+n+g+t".utf8 : " N t_h".utf8) | ("+m+k".utf8 : " m k_h".utf8) | (("m+t".utf8 | "m+b+t".utf8) : "m t_h".utf8)
  | ("+n+k".utf8 : " n k_h".utf8) | ("+n+t".utf8 : " n t_h".utf8);

northeast_clusters_rule = CDRewrite[northeast_clusters, "", "", sigma_star];
export BASIC_G2P_CLUSTERS = Optimize[northeast_clusters_rule @ g2p.default_clusters_rule];

export STEP_9 = Optimize[BASIC_G2P_CLUSTERS];

export G2P = Optimize[g2p.STEP_1 @ g2p.STEP_2 @ g2p.STEP_3 @ g2p.STEP_4 
  @ north.STEP_5 @ g2p.STEP_6 @ g2p.STEP_7 @ g2p.STEP_8 @ STEP_9 @ g2p.STEP_10];

